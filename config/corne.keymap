/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define VAN 3 // Vanilla
#define NAV 4
#define FNC 5
#define NUM 6
#define ADJ 7


&caps_word {
    continue-list = <UNDERSCORE MINUS BSPC>;
};

&lt {
    tapping-term-ms = <200>;
    quick-tap-ms    = <200>;
};

/ {
    behaviors {
        hthp: hold_tap_hold_preferred {
            compatible      = "zmk,behavior-hold-tap";
            label           = "hold_tap_hold_preferred";
            #binding-cells  = <2>;
            flavor          = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms    = <200>;
            bindings        = <&kp>, <&kp>;
        };
        lthp: layer_tap_hold_preferred {
            compatible      = "zmk,behavior-hold-tap";
            label           = "layer_tap_hold_preferred";
            #binding-cells  = <2>;
            flavor          = "hold-preferred";
            tapping-term-ms = <110>;
            quick-tap-ms    = <200>;
            bindings        = <&mo>, <&kp>;
        };
        lhm: left_homerow_mod {
            compatible                 = "zmk,behavior-hold-tap";
            label                      = "left_homerow_mod";
            #binding-cells             = <2>;
            tapping-term-ms            = <200>;
            quick-tap-ms               = <200>;
            require-prior-idle-ms      = <125>;
            flavor                     = "balanced";
            bindings                   = <&kp>, <&kp>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 37 38 40>;
            hold-trigger-on-release;
            global-quick-tap;
        };
        rhm: right_homerow_mod {
            compatible                 = "zmk,behavior-hold-tap";
            label                      = "right_homerow_mod";
            #binding-cells             = <2>;
            tapping-term-ms            = <200>;
            quick-tap-ms               = <200>;
            require-prior-idle-ms      = <125>;
            flavor                     = "balanced";
            bindings                   = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 37 40>;
            hold-trigger-on-release;
            global-quick-tap;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        adjust_layer {
            if-layers = <LWR RSE>;
            then-layer = <ADJ>;
        };
    };

    macros {
        arrw: arrw {
            label = "cpp_arrow";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <0>;
            bindings = <&kp MINUS &kp GT>;
        };
        clcl: clcl {
            label = "colon_colon";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <0>;
            bindings = <&kp COLON &kp COLON>;
        };
        msl: msl {
            label = "move_space_left";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&macro_press &kp LCTL>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTL>;
        };
        msr: msr {
            label = "move_space_right";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&macro_press &kp LCTL>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTL>;
        };
        /* tmux: tmux { */
        /*     label = "tmux"; */
        /*     compatible = "zmk,behavior-macro"; */
        /*     #binding-cells = <0>; */
        /*     tap-ms = <10>; */
        /*     wait-ms = <10>; */
        /*     bindings */
        /*         = <&macro_press &kp LCTL> */
        /*         , <&macro_tap &kp SPACE> */
        /*         , <&macro_release &kp LCTL>; */
        /* }; */
        ss_sv: ss_sv {
            label = "screenshot_save";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_press &kp LCMD>
                , <&macro_tap &kp N4>
                , <&macro_release &kp LCMD>
                , <&macro_release &kp LSHFT>;
        };
        ss_cp: ss_cp {
            label = "screenshot_copy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_press &kp LCMD>
                , <&macro_press &kp LCTL>
                , <&macro_tap &kp N4>
                , <&macro_release &kp LCTL>
                , <&macro_release &kp LCMD>
                , <&macro_release &kp LSHFT>;
        };
        sc_rec: sc_rec {
            label = "screen_record";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            tap-ms = <10>;
            wait-ms = <10>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_press &kp LCMD>
                , <&macro_tap &kp N5>
                , <&macro_release &kp LCMD>
                , <&macro_release &kp LSHFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
                &kp   TAB      &kp  Q       &kp  W      &kp  E      &kp  R        &kp T         &kp Y         &kp  U        &kp  I      &kp  O      &kp  P         &kp BSPC
                &hthp LCTL ESC &lhm LCTRL A &lhm LALT S &lhm LCMD D &lhm LSHFT F  &kp G         &kp H         &rhm LSHFT J  &rhm LCMD K &rhm LALT L &rhm LCTL SEMI &kp SQT
                &kp   LSHFT    &kp  Z       &kp  X      &kp  C      &kp  V        &kp B         &kp N         &kp  M        &kp  COMMA  &kp  DOT    &kp  FSLH      &kp RET
                                                        &kp LCMD    &lthp LWR DEL &lt NAV SPACE &lt FNC SPACE &lthp RSE RET &kp  LCTL
            >;
        };
        lower_layer
            bindings = <
                &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
                &trans  &trans  &trans  &trans  &trans  &trans     &trans  &arrw   &clcl   &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };
        raise_layer {
            bindings = <
                &kp TILDE   &kp EXCL   &kp AT     &kp HASH  &kp DLLR   &kp PRCNT   &kp CARET  &kp AMPS  &kp STAR  &kp PIPE  &kp BSLH   &trans
                &trans      &kp UNDER  &kp MINUS  &kp PLUS  &kp EQUAL  &none       &none      &kp LPAR  &kp RPAR  &kp LBKT  &kp RBKT   &kp GRAVE
                &none       &none      &none      &kp LT    &kp GT     &none       &none      &kp LBRC  &kp RBRC  &kp FSLH  &kp QMARK  &trans
                                                  &trans    &trans     &trans      &trans     &trans    &trans
            >;
        };
        vanilla_layer {
            bindings = <
                &kp TAB    &kp Q  &kp W  &kp E      &kp R         &kp T         &kp Y     &kp U          &kp I      &kp O    &kp P     &kp BSPC
                &kp ESC    &kp A  &kp S  &kp D      &kp F         &kp G         &kp H     &kp J          &kp K      &kp L    &kp SEMI  &kp SQT
                &kp LSHFT  &kp Z  &kp X  &kp C      &kp V         &kp B         &kp N     &kp M          &kp COMMA  &kp DOT  &kp FSLH  &kp RET
                                         &kp LCMD   &lthp LWR DEL &kp SPACE     &kp SPACE &lthp RSE RET  &mo  FNC
                >;
        };
        nav_layer {
            bindings = <
                &none &none &none &msl   &msr   &none     &kp HOME &kp PG_DN &kp PG_UP &kp END   &none &none
                &none &none &none &none  &none  &none     &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none &none
                &none &none &none &ss_sv &ss_cp &sc_rec   &none    &none     &none     &none     &none &none
                                  &trans &trans &trans    &trans   &trans    &trans
            >;
        };
        fn_layer {
            bindings = <
                &none &kp F12 &kp F7 &kp F8 &kp F9 &none        &none  &none     &none    &none    &none    &none
                &none &kp F11 &kp F4 &kp F5 &kp F6 &none        &none  &kp LSHFT &kp LCMD &kp LALT &kp LCTL &none
                &none &kp F10 &kp F1 &kp F2 &kp F3 &none        &none  &none     &none    &none    &none    &none
                                     &trans &trans &trans       &trans &trans &trans
            >;
        };
        numpad_layer {
            bindings = <
                &none   &none &none &none  &none  &none    &none     &kp N7    &kp N8    &kp N9    &kp EQUAL &none
                &to DEF &none &none &none  &none  &none    &kp FSLH  &kp N4    &kp N5    &kp N6    &kp MINUS &none
                &none   &none &none &none  &none  &none    &kp STAR  &kp N1    &kp N2    &kp N3    &kp PLUS  &none
                                    &trans &trans &trans   &kp SPACE &kp N0    &kp DOT
            >;
        };
        adjust_layer {
            bindings = <
                &none      &none &none &none  &none  &none    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4 &bt BT_CLR
                &none      &none &none &none  &none  &none    &none  &none    &none   &none &none &to DEF
                &caps_word &none &none &none  &none  &none    &none  &to NUM  &to VAN &none &none &none
                                  &trans &trans &trans   &trans &trans &trans
            >;
        };
    };
};

// &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
